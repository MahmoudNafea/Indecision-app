{"version":3,"sources":["components/header/header.js","components/requiredTasks/requiredTasks.js","components/addTask/addTask.js","components/task/task.js","components/tasks/tasks.js","components/tasksModal/tasksModal.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","subtitle","RequiredTasks","disabled","hasTasks","onClick","requiredTasksHandler","AddTask","state","error","undefined","submitHandler","bind","e","preventDefault","task","target","elements","taskInput","value","trim","this","addTaskHandler","setState","onSubmit","placeholder","name","type","Component","Task","count","taskText","removeTaskHandler","Tasks","removeAllHandler","tasks","length","map","index","key","TasksModal","isOpen","showModal","contentLabel","onRequestClose","closeModalHandler","closeTimeoutMS","ariaHideApp","App","indexOf","prevState","concat","taskToRemove","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6baf8d1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"container\">\r\n                <h1 className=\"header__title\">{props.title}</h1>\r\n                <h2 className=\"header__subtitle\">{props.subtitle}</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nconst RequiredTasks = (props) => {\r\n    return (\r\n        <div>\r\n            <button className=\"big-button\" disabled={!props.hasTasks}\r\n                onClick={props.requiredTasksHandler}>What should I do?</button>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default RequiredTasks","import React, { Component } from 'react';\r\n\r\nclass AddTask extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.submitHandler = this.submitHandler.bind(this)\r\n    }\r\n    state = {\r\n        error: undefined,\r\n    }\r\n    submitHandler(e) {\r\n        e.preventDefault()\r\n        const task = e.target.elements.taskInput.value.trim()\r\n        const error = this.props.addTaskHandler(task)\r\n        this.setState({ error: error })\r\n        if (!error) {\r\n            e.target.elements.taskInput.value = '';\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.error && <p className=\"add-task-error\">{this.state.error}</p>}\r\n                <form className=\"add-task\" onSubmit={this.submitHandler}>\r\n                    <input className=\"add-task__input\" placeholder=\"Add your task\" name=\"taskInput\" />\r\n                    <button className=\"small-button\" type=\"submit\">Add Task</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AddTask","import React from 'react'\r\n\r\nconst Task = (props) => {\r\n    return (\r\n        <div className=\"task\">\r\n            <p className=\"task__text\">{props.count}.{props.taskText} </p>\r\n            <button className=\"small-button small-button--link\"\r\n                onClick={(e) => { props.removeTaskHandler(props.taskText); }}>Remove</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task","import React from 'react'\r\nimport Task from '../task/task'\r\n\r\nconst Tasks = (props) => {\r\n    return (\r\n        <div>\r\n            <div className=\"widget-header\">\r\n                <h3 className=\"widget-header__title\">Your Tasks</h3>\r\n                <button className=\"small-button small-button--link\"\r\n                    onClick={props.removeAllHandler}>Remove All</button>\r\n            </div>\r\n            {props.tasks.length === 0 && <p className=\"widget__message\">Please add tasks to get started</p>}\r\n            {props.tasks.map((task, index) => <Task count={index + 1} key={task} taskText={task}\r\n                removeTaskHandler={props.removeTaskHandler} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Tasks","import React from 'react'\r\nimport Modal from 'react-modal'\r\n\r\n\r\nconst TasksModal = (props) => {\r\n    return (\r\n        <Modal\r\n            isOpen={props.showModal}\r\n            contentLabel='Tasks'\r\n            onRequestClose={props.closeModalHandler}\r\n            closeTimeoutMS={200}\r\n            ariaHideApp={false}\r\n            className=\"modal\">\r\n            <div>\r\n                <h3 className=\"modal__title\">Required Tasks</h3>\r\n                <p className=\"modal__body\">{props.tasks}</p>\r\n                <button className=\"small-button\" onClick={props.closeModalHandler}>Okay</button>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default TasksModal","import React, { Component } from 'react';\r\nimport Header from '../src/components/header/header'\r\nimport RequiredTasks from './components/requiredTasks/requiredTasks';\r\nimport AddTask from './components/addTask/addTask';\r\nimport Tasks from '../src/components/tasks/tasks';\r\nimport TasksModal from '../src/components/tasksModal/tasksModal';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.removeAllHandler = this.removeAllHandler.bind(this)\r\n    this.requiredTasksHandler = this.requiredTasksHandler.bind(this)\r\n    this.addTaskHandler = this.addTaskHandler.bind(this)\r\n    this.removeTaskHandler = this.removeTaskHandler.bind(this)\r\n    this.closeModalHandler = this.closeModalHandler.bind(this)\r\n  }\r\n  state = {\r\n    tasks: [],\r\n    showModal: false\r\n  }\r\n\r\n  removeTaskHandler(taskToRemove) {\r\n    this.setState((prevState) => {\r\n      return {\r\n        tasks: prevState.tasks.filter((task) => {\r\n          return taskToRemove !== task\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  removeAllHandler() {\r\n    this.setState({\r\n      tasks: []\r\n    })\r\n  }\r\n\r\n  requiredTasksHandler() {\r\n    // alert(this.state.tasks)\r\n    this.setState({ showModal: true })\r\n  }\r\n\r\n  addTaskHandler = (task) => {\r\n    if (!task) {\r\n      return 'Please enter valid item'\r\n    } else if (this.state.tasks.indexOf(task) > -1) {\r\n      return 'Please enter a new item'\r\n    }\r\n    this.setState((prevState) => {\r\n      return {\r\n        tasks: prevState.tasks.concat(task)\r\n      }\r\n    })\r\n  }\r\n\r\n  closeModalHandler = () => {\r\n    this.setState({ showModal: false })\r\n  }\r\n\r\n  render() {\r\n    const title = 'Indecision'\r\n    const subtitle = 'Make your life better with technology'\r\n    return (\r\n      <div>\r\n        <Header title={title} subtitle={subtitle} />\r\n        <div className=\"container\">\r\n          <RequiredTasks hasTasks={this.state.tasks.length > 0}\r\n            requiredTasksHandler={this.requiredTasksHandler} />\r\n          <div className=\"widget\">\r\n            <Tasks removeTaskHandler={this.removeTaskHandler} tasks={this.state.tasks}\r\n              removeAllHandler={this.removeAllHandler} />\r\n            <AddTask addTaskHandler={this.addTaskHandler} />\r\n          </div>\r\n        </div>\r\n        <TasksModal showModal={this.state.showModal} tasks={this.state.tasks}\r\n          closeModalHandler={this.closeModalHandler} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'normalize.css/normalize.css';\r\nimport './styles/styles.scss';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}